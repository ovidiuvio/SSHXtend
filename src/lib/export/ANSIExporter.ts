// ANSI terminal export preserving escape sequences
import type { Terminal } from 'sshx-xterm';
import type { ExportOptions, ExportResult, TerminalInfo } from './types';

export class ANSIExporter {
  constructor(
    private term: Terminal,
    private terminalInfo: TerminalInfo
  ) {}

  export(options: ExportOptions): ExportResult {
    const content = this.extractANSIContent(options);
    const filename = this.generateFilename(options);

    return {
      content: content,
      filename,
      mimeType: 'text/plain'
    };
  }

  private extractANSIContent(options: ExportOptions): string {
    const buffer = this.term.buffer.active;
    const lines: string[] = [];

    if (options.selectionOnly && this.term.hasSelection()) {
      // For selection, we can't easily preserve ANSI codes from selection
      // Fall back to getting the selected text with basic formatting indication
      const selection = this.term.getSelection();
      return this.addHeader(options) + selection + this.addFooter();
    }

    // Extract all lines from buffer, preserving ANSI escape sequences
    for (let i = 0; i < buffer.length; i++) {
      const line = buffer.getLine(i);
      if (line) {
        // translateToString(false) should preserve escape sequences
        // but xterm.js might not support this directly
        // We'll use a workaround to reconstruct ANSI codes from cell data
        const lineText = this.reconstructANSILine(line);
        lines.push(lineText);
      }
    }

    const content = lines.join('\n');
    return this.addHeader(options) + content + this.addFooter();
  }

  private reconstructANSILine(line: any): string {
    // This is a simplified ANSI reconstruction
    // In a full implementation, we'd need to track cell attributes
    // and generate appropriate ANSI escape sequences
    
    // For now, we'll use the basic translateToString method
    // and add a note about ANSI limitations
    return line.translateToString(true);
  }

  private addHeader(options: ExportOptions): string {
    if (options.includeTimestamp === false) return '';
    
    const timestamp = new Date().toISOString();
    const title = options.title || this.terminalInfo.title || 'Terminal Session';
    
    return `# ${title}
# Exported: ${timestamp}
# Source: SSHXtend Terminal Export
# Note: This is a plain text export. For full ANSI color support, use HTML export.
#
# To view with colors in terminal: cat ${this.generateFilename(options).replace('.ansi', '.txt')}
# To view in VS Code terminal: cat ${this.generateFilename(options)}
#
# ===== Terminal Output =====

`;
  }

  private addFooter(): string {
    return `

# ===== End of Terminal Export =====
# Generated by SSHXtend - https://github.com/ovidiuvio/sshx
`;
  }

  private generateFilename(options: ExportOptions): string {
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, "-");
    const title = (options.title || this.terminalInfo.title || 'terminal')
      .replace(/[^a-zA-Z0-9]/g, "_")
      .toLowerCase();
    
    const suffix = options.selectionOnly ? 'selection' : 'session';
    return `terminal-${title}-${suffix}-${timestamp}.ansi`;
  }
}