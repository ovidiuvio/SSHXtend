// Markdown terminal export for documentation
import type { Terminal } from 'sshx-xterm';
import type { ExportOptions, ExportResult, TerminalInfo } from './types';

export class MarkdownExporter {
  constructor(
    private term: Terminal,
    private terminalInfo: TerminalInfo
  ) {}

  export(options: ExportOptions): ExportResult {
    const content = this.generateMarkdownContent(options);
    const filename = this.generateFilename(options);

    return {
      content,
      filename,
      mimeType: 'text/markdown'
    };
  }

  private generateMarkdownContent(options: ExportOptions): string {
    const title = options.title || this.terminalInfo.title || 'Terminal Session';
    const timestamp = new Date().toISOString();
    const terminalContent = this.extractTerminalContent(options);

    return `# ${title}

> **Export Information**
> - **Exported:** ${new Date(timestamp).toLocaleString()}
> - **Source:** SSHXtend Terminal Export
> - **Format:** Markdown with code blocks
> - **Terminal Size:** ${this.terminalInfo.cols}×${this.terminalInfo.rows}
> - **Font:** ${this.terminalInfo.fontFamily} (${this.terminalInfo.fontSize}px)

## Terminal Output

\`\`\`bash
${terminalContent}
\`\`\`

## Usage

This terminal session was exported from **SSHXtend**, an enhanced collaborative terminal with AI integration.

### Viewing Options

- **VS Code**: Open this file in VS Code for syntax highlighting and markdown preview
- **GitHub**: This file will render nicely on GitHub with proper formatting
- **Terminal**: Use \`cat ${this.generateFilename(options)}\` to view in any terminal

### Features Used

- 🖥️ **Collaborative Terminal**: Real-time terminal sharing
- 🎨 **Rich Theming**: ${this.terminalInfo.fontFamily} font family
- 📊 **Session Management**: Multi-terminal window support
${options.selectionOnly ? '- ✂️ **Selection Export**: This export contains only selected content' : '- 📄 **Full Session**: Complete terminal session exported'}

---

*Generated by [SSHXtend](https://github.com/ovidiuvio/sshx) - Enhanced sshx with enterprise features and AI integration*
`;
  }

  private extractTerminalContent(options: ExportOptions): string {
    if (options.selectionOnly && this.term.hasSelection()) {
      return this.term.getSelection() || '';
    }

    const buffer = this.term.buffer.active;
    const lines: string[] = [];

    for (let i = 0; i < buffer.length; i++) {
      const line = buffer.getLine(i);
      if (line) {
        const lineText = line.translateToString(true);
        lines.push(lineText);
      }
    }

    return lines.join('\n');
  }

  private generateFilename(options: ExportOptions): string {
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, "-");
    const title = (options.title || this.terminalInfo.title || 'terminal')
      .replace(/[^a-zA-Z0-9]/g, "_")
      .toLowerCase();
    
    const suffix = options.selectionOnly ? 'selection' : 'session';
    return `terminal-${title}-${suffix}-${timestamp}.md`;
  }
}