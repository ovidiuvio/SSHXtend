// This file contains the service definition for sshx, used by the client to
// communicate their terminal state over gRPC.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.1
// source: proto/sshx.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Details of bytes exchanged with the terminal.
type TerminalData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // ID of the shell.
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // Encrypted, UTF-8 terminal data.
	Seq           uint64                 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`  // Sequence number of the first byte.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TerminalData) Reset() {
	*x = TerminalData{}
	mi := &file_proto_sshx_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalData) ProtoMessage() {}

func (x *TerminalData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sshx_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalData.ProtoReflect.Descriptor instead.
func (*TerminalData) Descriptor() ([]byte, []int) {
	return file_proto_sshx_proto_rawDescGZIP(), []int{0}
}

func (x *TerminalData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TerminalData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TerminalData) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// Details of bytes input to the terminal (not necessarily valid UTF-8).
type TerminalInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`         // ID of the shell.
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`      // Encrypted binary sequence of terminal data.
	Offset        uint64                 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"` // Offset of the first byte for encryption.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TerminalInput) Reset() {
	*x = TerminalInput{}
	mi := &file_proto_sshx_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminalInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalInput) ProtoMessage() {}

func (x *TerminalInput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sshx_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalInput.ProtoReflect.Descriptor instead.
func (*TerminalInput) Descriptor() ([]byte, []int) {
	return file_proto_sshx_proto_rawDescGZIP(), []int{1}
}

func (x *TerminalInput) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TerminalInput) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TerminalInput) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Pair of a terminal ID and its associated size.
type TerminalSize struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`     // ID of the shell.
	Rows          uint32                 `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"` // Number of rows for the terminal.
	Cols          uint32                 `protobuf:"varint,3,opt,name=cols,proto3" json:"cols,omitempty"` // Number of columns for the terminal.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TerminalSize) Reset() {
	*x = TerminalSize{}
	mi := &file_proto_sshx_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerminalSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalSize) ProtoMessage() {}

func (x *TerminalSize) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sshx_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalSize.ProtoReflect.Descriptor instead.
func (*TerminalSize) Descriptor() ([]byte, []int) {
	return file_proto_sshx_proto_rawDescGZIP(), []int{2}
}

func (x *TerminalSize) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TerminalSize) GetRows() uint32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *TerminalSize) GetCols() uint32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

// Request to open an sshx session.
type OpenRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Origin            string                 `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`                                                        // Web origin of the server.
	EncryptedZeros    []byte                 `protobuf:"bytes,2,opt,name=encrypted_zeros,json=encryptedZeros,proto3" json:"encrypted_zeros,omitempty"`                  // Encrypted zero block, for client verification.
	Name              string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                            // Name of the session (user@hostname).
	WritePasswordHash []byte                 `protobuf:"bytes,4,opt,name=write_password_hash,json=writePasswordHash,proto3,oneof" json:"write_password_hash,omitempty"` // Hashed write password, if read-only mode is enabled.
	SessionId         *string                `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3,oneof" json:"session_id,omitempty"`                           // Add this field
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OpenRequest) Reset() {
	*x = OpenRequest{}
	mi := &file_proto_sshx_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenRequest) ProtoMessage() {}

func (x *OpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sshx_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenRequest.ProtoReflect.Descriptor instead.
func (*OpenRequest) Descriptor() ([]byte, []int) {
	return file_proto_sshx_proto_rawDescGZIP(), []int{3}
}

func (x *OpenRequest) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *OpenRequest) GetEncryptedZeros() []byte {
	if x != nil {
		return x.EncryptedZeros
	}
	return nil
}

func (x *OpenRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpenRequest) GetWritePasswordHash() []byte {
	if x != nil {
		return x.WritePasswordHash
	}
	return nil
}

func (x *OpenRequest) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

// Details of a newly-created sshx session.
type OpenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // Name of the session.
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"` // Signed verification token for the client.
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`     // Public web URL to view the session.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenResponse) Reset() {
	*x = OpenResponse{}
	mi := &file_proto_sshx_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenResponse) ProtoMessage() {}

func (x *OpenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sshx_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenResponse.ProtoReflect.Descriptor instead.
func (*OpenResponse) Descriptor() ([]byte, []int) {
	return file_proto_sshx_proto_rawDescGZIP(), []int{4}
}

func (x *OpenResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *OpenResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Sequence numbers for all active shells, used for synchronization.
type SequenceNumbers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Map           map[uint32]uint64      `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Active shells and their sequence numbers.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequenceNumbers) Reset() {
	*x = SequenceNumbers{}
	mi := &file_proto_sshx_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequenceNumbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceNumbers) ProtoMessage() {}

func (x *SequenceNumbers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sshx_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceNumbers.ProtoReflect.Descriptor instead.
func (*SequenceNumbers) Descriptor() ([]byte, []int) {
	return file_proto_sshx_proto_rawDescGZIP(), []int{5}
}

func (x *SequenceNumbers) GetMap() map[uint32]uint64 {
	if x != nil {
		return x.Map
	}
	return nil
}

// Data for a new shell.
type NewShell struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the shell.
	X             int32                  `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`   // X position of the shell.
	Y             int32                  `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`   // Y position of the shell.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewShell) Reset() {
	*x = NewShell{}
	mi := &file_proto_sshx_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewShell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewShell) ProtoMessage() {}

func (x *NewShell) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sshx_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewShell.ProtoReflect.Descriptor instead.
func (*NewShell) Descriptor() ([]byte, []int) {
	return file_proto_sshx_proto_rawDescGZIP(), []int{6}
}

func (x *NewShell) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewShell) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *NewShell) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// Bidirectional streaming update from the client.
type ClientUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ClientMessage:
	//
	//	*ClientUpdate_Hello
	//	*ClientUpdate_Data
	//	*ClientUpdate_CreatedShell
	//	*ClientUpdate_ClosedShell
	//	*ClientUpdate_Pong
	//	*ClientUpdate_Error
	ClientMessage isClientUpdate_ClientMessage `protobuf_oneof:"client_message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientUpdate) Reset() {
	*x = ClientUpdate{}
	mi := &file_proto_sshx_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUpdate) ProtoMessage() {}

func (x *ClientUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sshx_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUpdate.ProtoReflect.Descriptor instead.
func (*ClientUpdate) Descriptor() ([]byte, []int) {
	return file_proto_sshx_proto_rawDescGZIP(), []int{7}
}

func (x *ClientUpdate) GetClientMessage() isClientUpdate_ClientMessage {
	if x != nil {
		return x.ClientMessage
	}
	return nil
}

func (x *ClientUpdate) GetHello() string {
	if x != nil {
		if x, ok := x.ClientMessage.(*ClientUpdate_Hello); ok {
			return x.Hello
		}
	}
	return ""
}

func (x *ClientUpdate) GetData() *TerminalData {
	if x != nil {
		if x, ok := x.ClientMessage.(*ClientUpdate_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *ClientUpdate) GetCreatedShell() *NewShell {
	if x != nil {
		if x, ok := x.ClientMessage.(*ClientUpdate_CreatedShell); ok {
			return x.CreatedShell
		}
	}
	return nil
}

func (x *ClientUpdate) GetClosedShell() uint32 {
	if x != nil {
		if x, ok := x.ClientMessage.(*ClientUpdate_ClosedShell); ok {
			return x.ClosedShell
		}
	}
	return 0
}

func (x *ClientUpdate) GetPong() uint64 {
	if x != nil {
		if x, ok := x.ClientMessage.(*ClientUpdate_Pong); ok {
			return x.Pong
		}
	}
	return 0
}

func (x *ClientUpdate) GetError() string {
	if x != nil {
		if x, ok := x.ClientMessage.(*ClientUpdate_Error); ok {
			return x.Error
		}
	}
	return ""
}

type isClientUpdate_ClientMessage interface {
	isClientUpdate_ClientMessage()
}

type ClientUpdate_Hello struct {
	Hello string `protobuf:"bytes,1,opt,name=hello,proto3,oneof"` // First stream message: "name,token".
}

type ClientUpdate_Data struct {
	Data *TerminalData `protobuf:"bytes,2,opt,name=data,proto3,oneof"` // Stream data from the terminal.
}

type ClientUpdate_CreatedShell struct {
	CreatedShell *NewShell `protobuf:"bytes,3,opt,name=created_shell,json=createdShell,proto3,oneof"` // Acknowledge that a new shell was created.
}

type ClientUpdate_ClosedShell struct {
	ClosedShell uint32 `protobuf:"varint,4,opt,name=closed_shell,json=closedShell,proto3,oneof"` // Acknowledge that a shell was closed.
}

type ClientUpdate_Pong struct {
	Pong uint64 `protobuf:"fixed64,14,opt,name=pong,proto3,oneof"` // Response for latency measurement.
}

type ClientUpdate_Error struct {
	Error string `protobuf:"bytes,15,opt,name=error,proto3,oneof"`
}

func (*ClientUpdate_Hello) isClientUpdate_ClientMessage() {}

func (*ClientUpdate_Data) isClientUpdate_ClientMessage() {}

func (*ClientUpdate_CreatedShell) isClientUpdate_ClientMessage() {}

func (*ClientUpdate_ClosedShell) isClientUpdate_ClientMessage() {}

func (*ClientUpdate_Pong) isClientUpdate_ClientMessage() {}

func (*ClientUpdate_Error) isClientUpdate_ClientMessage() {}

// Bidirectional streaming update from the server.
type ServerUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ServerMessage:
	//
	//	*ServerUpdate_Input
	//	*ServerUpdate_CreateShell
	//	*ServerUpdate_CloseShell
	//	*ServerUpdate_Sync
	//	*ServerUpdate_Resize
	//	*ServerUpdate_Ping
	//	*ServerUpdate_Error
	ServerMessage isServerUpdate_ServerMessage `protobuf_oneof:"server_message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerUpdate) Reset() {
	*x = ServerUpdate{}
	mi := &file_proto_sshx_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerUpdate) ProtoMessage() {}

func (x *ServerUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sshx_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerUpdate.ProtoReflect.Descriptor instead.
func (*ServerUpdate) Descriptor() ([]byte, []int) {
	return file_proto_sshx_proto_rawDescGZIP(), []int{8}
}

func (x *ServerUpdate) GetServerMessage() isServerUpdate_ServerMessage {
	if x != nil {
		return x.ServerMessage
	}
	return nil
}

func (x *ServerUpdate) GetInput() *TerminalInput {
	if x != nil {
		if x, ok := x.ServerMessage.(*ServerUpdate_Input); ok {
			return x.Input
		}
	}
	return nil
}

func (x *ServerUpdate) GetCreateShell() *NewShell {
	if x != nil {
		if x, ok := x.ServerMessage.(*ServerUpdate_CreateShell); ok {
			return x.CreateShell
		}
	}
	return nil
}

func (x *ServerUpdate) GetCloseShell() uint32 {
	if x != nil {
		if x, ok := x.ServerMessage.(*ServerUpdate_CloseShell); ok {
			return x.CloseShell
		}
	}
	return 0
}

func (x *ServerUpdate) GetSync() *SequenceNumbers {
	if x != nil {
		if x, ok := x.ServerMessage.(*ServerUpdate_Sync); ok {
			return x.Sync
		}
	}
	return nil
}

func (x *ServerUpdate) GetResize() *TerminalSize {
	if x != nil {
		if x, ok := x.ServerMessage.(*ServerUpdate_Resize); ok {
			return x.Resize
		}
	}
	return nil
}

func (x *ServerUpdate) GetPing() uint64 {
	if x != nil {
		if x, ok := x.ServerMessage.(*ServerUpdate_Ping); ok {
			return x.Ping
		}
	}
	return 0
}

func (x *ServerUpdate) GetError() string {
	if x != nil {
		if x, ok := x.ServerMessage.(*ServerUpdate_Error); ok {
			return x.Error
		}
	}
	return ""
}

type isServerUpdate_ServerMessage interface {
	isServerUpdate_ServerMessage()
}

type ServerUpdate_Input struct {
	Input *TerminalInput `protobuf:"bytes,1,opt,name=input,proto3,oneof"` // Remote input bytes, received from the user.
}

type ServerUpdate_CreateShell struct {
	CreateShell *NewShell `protobuf:"bytes,2,opt,name=create_shell,json=createShell,proto3,oneof"` // ID of a new shell.
}

type ServerUpdate_CloseShell struct {
	CloseShell uint32 `protobuf:"varint,3,opt,name=close_shell,json=closeShell,proto3,oneof"` // ID of a shell to close.
}

type ServerUpdate_Sync struct {
	Sync *SequenceNumbers `protobuf:"bytes,4,opt,name=sync,proto3,oneof"` // Periodic sequence number sync.
}

type ServerUpdate_Resize struct {
	Resize *TerminalSize `protobuf:"bytes,5,opt,name=resize,proto3,oneof"` // Resize a terminal window.
}

type ServerUpdate_Ping struct {
	Ping uint64 `protobuf:"fixed64,14,opt,name=ping,proto3,oneof"` // Request a pong, with the timestamp.
}

type ServerUpdate_Error struct {
	Error string `protobuf:"bytes,15,opt,name=error,proto3,oneof"`
}

func (*ServerUpdate_Input) isServerUpdate_ServerMessage() {}

func (*ServerUpdate_CreateShell) isServerUpdate_ServerMessage() {}

func (*ServerUpdate_CloseShell) isServerUpdate_ServerMessage() {}

func (*ServerUpdate_Sync) isServerUpdate_ServerMessage() {}

func (*ServerUpdate_Resize) isServerUpdate_ServerMessage() {}

func (*ServerUpdate_Ping) isServerUpdate_ServerMessage() {}

func (*ServerUpdate_Error) isServerUpdate_ServerMessage() {}

// Request to stop a sshx session gracefully.
type CloseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // Name of the session to terminate.
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"` // Session verification token.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseRequest) Reset() {
	*x = CloseRequest{}
	mi := &file_proto_sshx_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseRequest) ProtoMessage() {}

func (x *CloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sshx_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseRequest.ProtoReflect.Descriptor instead.
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return file_proto_sshx_proto_rawDescGZIP(), []int{9}
}

func (x *CloseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloseRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Server response to closing a session.
type CloseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseResponse) Reset() {
	*x = CloseResponse{}
	mi := &file_proto_sshx_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseResponse) ProtoMessage() {}

func (x *CloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sshx_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseResponse.ProtoReflect.Descriptor instead.
func (*CloseResponse) Descriptor() ([]byte, []int) {
	return file_proto_sshx_proto_rawDescGZIP(), []int{10}
}

// Snapshot of a session, used to restore state for persistence across servers.
type SerializedSession struct {
	state             protoimpl.MessageState      `protogen:"open.v1"`
	EncryptedZeros    []byte                      `protobuf:"bytes,1,opt,name=encrypted_zeros,json=encryptedZeros,proto3" json:"encrypted_zeros,omitempty"`
	Shells            map[uint32]*SerializedShell `protobuf:"bytes,2,rep,name=shells,proto3" json:"shells,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NextSid           uint32                      `protobuf:"varint,3,opt,name=next_sid,json=nextSid,proto3" json:"next_sid,omitempty"`
	NextUid           uint32                      `protobuf:"varint,4,opt,name=next_uid,json=nextUid,proto3" json:"next_uid,omitempty"`
	Name              string                      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	WritePasswordHash []byte                      `protobuf:"bytes,6,opt,name=write_password_hash,json=writePasswordHash,proto3,oneof" json:"write_password_hash,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SerializedSession) Reset() {
	*x = SerializedSession{}
	mi := &file_proto_sshx_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerializedSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializedSession) ProtoMessage() {}

func (x *SerializedSession) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sshx_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializedSession.ProtoReflect.Descriptor instead.
func (*SerializedSession) Descriptor() ([]byte, []int) {
	return file_proto_sshx_proto_rawDescGZIP(), []int{11}
}

func (x *SerializedSession) GetEncryptedZeros() []byte {
	if x != nil {
		return x.EncryptedZeros
	}
	return nil
}

func (x *SerializedSession) GetShells() map[uint32]*SerializedShell {
	if x != nil {
		return x.Shells
	}
	return nil
}

func (x *SerializedSession) GetNextSid() uint32 {
	if x != nil {
		return x.NextSid
	}
	return 0
}

func (x *SerializedSession) GetNextUid() uint32 {
	if x != nil {
		return x.NextUid
	}
	return 0
}

func (x *SerializedSession) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SerializedSession) GetWritePasswordHash() []byte {
	if x != nil {
		return x.WritePasswordHash
	}
	return nil
}

type SerializedShell struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seqnum        uint64                 `protobuf:"varint,1,opt,name=seqnum,proto3" json:"seqnum,omitempty"`
	Data          [][]byte               `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	ChunkOffset   uint64                 `protobuf:"varint,3,opt,name=chunk_offset,json=chunkOffset,proto3" json:"chunk_offset,omitempty"`
	ByteOffset    uint64                 `protobuf:"varint,4,opt,name=byte_offset,json=byteOffset,proto3" json:"byte_offset,omitempty"`
	Closed        bool                   `protobuf:"varint,5,opt,name=closed,proto3" json:"closed,omitempty"`
	WinsizeX      int32                  `protobuf:"varint,6,opt,name=winsize_x,json=winsizeX,proto3" json:"winsize_x,omitempty"`
	WinsizeY      int32                  `protobuf:"varint,7,opt,name=winsize_y,json=winsizeY,proto3" json:"winsize_y,omitempty"`
	WinsizeRows   uint32                 `protobuf:"varint,8,opt,name=winsize_rows,json=winsizeRows,proto3" json:"winsize_rows,omitempty"`
	WinsizeCols   uint32                 `protobuf:"varint,9,opt,name=winsize_cols,json=winsizeCols,proto3" json:"winsize_cols,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SerializedShell) Reset() {
	*x = SerializedShell{}
	mi := &file_proto_sshx_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerializedShell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializedShell) ProtoMessage() {}

func (x *SerializedShell) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sshx_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializedShell.ProtoReflect.Descriptor instead.
func (*SerializedShell) Descriptor() ([]byte, []int) {
	return file_proto_sshx_proto_rawDescGZIP(), []int{12}
}

func (x *SerializedShell) GetSeqnum() uint64 {
	if x != nil {
		return x.Seqnum
	}
	return 0
}

func (x *SerializedShell) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SerializedShell) GetChunkOffset() uint64 {
	if x != nil {
		return x.ChunkOffset
	}
	return 0
}

func (x *SerializedShell) GetByteOffset() uint64 {
	if x != nil {
		return x.ByteOffset
	}
	return 0
}

func (x *SerializedShell) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *SerializedShell) GetWinsizeX() int32 {
	if x != nil {
		return x.WinsizeX
	}
	return 0
}

func (x *SerializedShell) GetWinsizeY() int32 {
	if x != nil {
		return x.WinsizeY
	}
	return 0
}

func (x *SerializedShell) GetWinsizeRows() uint32 {
	if x != nil {
		return x.WinsizeRows
	}
	return 0
}

func (x *SerializedShell) GetWinsizeCols() uint32 {
	if x != nil {
		return x.WinsizeCols
	}
	return 0
}

var File_proto_sshx_proto protoreflect.FileDescriptor

const file_proto_sshx_proto_rawDesc = "" +
	"\n" +
	"\x10proto/sshx.proto\x12\x04sshx\"D\n" +
	"\fTerminalData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x10\n" +
	"\x03seq\x18\x03 \x01(\x04R\x03seq\"K\n" +
	"\rTerminalInput\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x04R\x06offset\"F\n" +
	"\fTerminalSize\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x12\n" +
	"\x04rows\x18\x02 \x01(\rR\x04rows\x12\x12\n" +
	"\x04cols\x18\x03 \x01(\rR\x04cols\"\xe2\x01\n" +
	"\vOpenRequest\x12\x16\n" +
	"\x06origin\x18\x01 \x01(\tR\x06origin\x12'\n" +
	"\x0fencrypted_zeros\x18\x02 \x01(\fR\x0eencryptedZeros\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x123\n" +
	"\x13write_password_hash\x18\x04 \x01(\fH\x00R\x11writePasswordHash\x88\x01\x01\x12\"\n" +
	"\n" +
	"session_id\x18\x05 \x01(\tH\x01R\tsessionId\x88\x01\x01B\x16\n" +
	"\x14_write_password_hashB\r\n" +
	"\v_session_id\"J\n" +
	"\fOpenResponse\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\"{\n" +
	"\x0fSequenceNumbers\x120\n" +
	"\x03map\x18\x01 \x03(\v2\x1e.sshx.SequenceNumbers.MapEntryR\x03map\x1a6\n" +
	"\bMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"6\n" +
	"\bNewShell\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\f\n" +
	"\x01x\x18\x02 \x01(\x05R\x01x\x12\f\n" +
	"\x01y\x18\x03 \x01(\x05R\x01y\"\xec\x01\n" +
	"\fClientUpdate\x12\x16\n" +
	"\x05hello\x18\x01 \x01(\tH\x00R\x05hello\x12(\n" +
	"\x04data\x18\x02 \x01(\v2\x12.sshx.TerminalDataH\x00R\x04data\x125\n" +
	"\rcreated_shell\x18\x03 \x01(\v2\x0e.sshx.NewShellH\x00R\fcreatedShell\x12#\n" +
	"\fclosed_shell\x18\x04 \x01(\rH\x00R\vclosedShell\x12\x14\n" +
	"\x04pong\x18\x0e \x01(\x06H\x00R\x04pong\x12\x16\n" +
	"\x05error\x18\x0f \x01(\tH\x00R\x05errorB\x10\n" +
	"\x0eclient_message\"\xae\x02\n" +
	"\fServerUpdate\x12+\n" +
	"\x05input\x18\x01 \x01(\v2\x13.sshx.TerminalInputH\x00R\x05input\x123\n" +
	"\fcreate_shell\x18\x02 \x01(\v2\x0e.sshx.NewShellH\x00R\vcreateShell\x12!\n" +
	"\vclose_shell\x18\x03 \x01(\rH\x00R\n" +
	"closeShell\x12+\n" +
	"\x04sync\x18\x04 \x01(\v2\x15.sshx.SequenceNumbersH\x00R\x04sync\x12,\n" +
	"\x06resize\x18\x05 \x01(\v2\x12.sshx.TerminalSizeH\x00R\x06resize\x12\x14\n" +
	"\x04ping\x18\x0e \x01(\x06H\x00R\x04ping\x12\x16\n" +
	"\x05error\x18\x0f \x01(\tH\x00R\x05errorB\x10\n" +
	"\x0eserver_message\"8\n" +
	"\fCloseRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\"\x0f\n" +
	"\rCloseResponse\"\xe2\x02\n" +
	"\x11SerializedSession\x12'\n" +
	"\x0fencrypted_zeros\x18\x01 \x01(\fR\x0eencryptedZeros\x12;\n" +
	"\x06shells\x18\x02 \x03(\v2#.sshx.SerializedSession.ShellsEntryR\x06shells\x12\x19\n" +
	"\bnext_sid\x18\x03 \x01(\rR\anextSid\x12\x19\n" +
	"\bnext_uid\x18\x04 \x01(\rR\anextUid\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x123\n" +
	"\x13write_password_hash\x18\x06 \x01(\fH\x00R\x11writePasswordHash\x88\x01\x01\x1aP\n" +
	"\vShellsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.sshx.SerializedShellR\x05value:\x028\x01B\x16\n" +
	"\x14_write_password_hash\"\x99\x02\n" +
	"\x0fSerializedShell\x12\x16\n" +
	"\x06seqnum\x18\x01 \x01(\x04R\x06seqnum\x12\x12\n" +
	"\x04data\x18\x02 \x03(\fR\x04data\x12!\n" +
	"\fchunk_offset\x18\x03 \x01(\x04R\vchunkOffset\x12\x1f\n" +
	"\vbyte_offset\x18\x04 \x01(\x04R\n" +
	"byteOffset\x12\x16\n" +
	"\x06closed\x18\x05 \x01(\bR\x06closed\x12\x1b\n" +
	"\twinsize_x\x18\x06 \x01(\x05R\bwinsizeX\x12\x1b\n" +
	"\twinsize_y\x18\a \x01(\x05R\bwinsizeY\x12!\n" +
	"\fwinsize_rows\x18\b \x01(\rR\vwinsizeRows\x12!\n" +
	"\fwinsize_cols\x18\t \x01(\rR\vwinsizeCols2\xa5\x01\n" +
	"\vSshxService\x12-\n" +
	"\x04Open\x12\x11.sshx.OpenRequest\x1a\x12.sshx.OpenResponse\x125\n" +
	"\aChannel\x12\x12.sshx.ClientUpdate\x1a\x12.sshx.ServerUpdate(\x010\x01\x120\n" +
	"\x05Close\x12\x12.sshx.CloseRequest\x1a\x13.sshx.CloseResponseB\x13Z\x11sshx-go/pkg/protob\x06proto3"

var (
	file_proto_sshx_proto_rawDescOnce sync.Once
	file_proto_sshx_proto_rawDescData []byte
)

func file_proto_sshx_proto_rawDescGZIP() []byte {
	file_proto_sshx_proto_rawDescOnce.Do(func() {
		file_proto_sshx_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_sshx_proto_rawDesc), len(file_proto_sshx_proto_rawDesc)))
	})
	return file_proto_sshx_proto_rawDescData
}

var file_proto_sshx_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_sshx_proto_goTypes = []any{
	(*TerminalData)(nil),      // 0: sshx.TerminalData
	(*TerminalInput)(nil),     // 1: sshx.TerminalInput
	(*TerminalSize)(nil),      // 2: sshx.TerminalSize
	(*OpenRequest)(nil),       // 3: sshx.OpenRequest
	(*OpenResponse)(nil),      // 4: sshx.OpenResponse
	(*SequenceNumbers)(nil),   // 5: sshx.SequenceNumbers
	(*NewShell)(nil),          // 6: sshx.NewShell
	(*ClientUpdate)(nil),      // 7: sshx.ClientUpdate
	(*ServerUpdate)(nil),      // 8: sshx.ServerUpdate
	(*CloseRequest)(nil),      // 9: sshx.CloseRequest
	(*CloseResponse)(nil),     // 10: sshx.CloseResponse
	(*SerializedSession)(nil), // 11: sshx.SerializedSession
	(*SerializedShell)(nil),   // 12: sshx.SerializedShell
	nil,                       // 13: sshx.SequenceNumbers.MapEntry
	nil,                       // 14: sshx.SerializedSession.ShellsEntry
}
var file_proto_sshx_proto_depIdxs = []int32{
	13, // 0: sshx.SequenceNumbers.map:type_name -> sshx.SequenceNumbers.MapEntry
	0,  // 1: sshx.ClientUpdate.data:type_name -> sshx.TerminalData
	6,  // 2: sshx.ClientUpdate.created_shell:type_name -> sshx.NewShell
	1,  // 3: sshx.ServerUpdate.input:type_name -> sshx.TerminalInput
	6,  // 4: sshx.ServerUpdate.create_shell:type_name -> sshx.NewShell
	5,  // 5: sshx.ServerUpdate.sync:type_name -> sshx.SequenceNumbers
	2,  // 6: sshx.ServerUpdate.resize:type_name -> sshx.TerminalSize
	14, // 7: sshx.SerializedSession.shells:type_name -> sshx.SerializedSession.ShellsEntry
	12, // 8: sshx.SerializedSession.ShellsEntry.value:type_name -> sshx.SerializedShell
	3,  // 9: sshx.SshxService.Open:input_type -> sshx.OpenRequest
	7,  // 10: sshx.SshxService.Channel:input_type -> sshx.ClientUpdate
	9,  // 11: sshx.SshxService.Close:input_type -> sshx.CloseRequest
	4,  // 12: sshx.SshxService.Open:output_type -> sshx.OpenResponse
	8,  // 13: sshx.SshxService.Channel:output_type -> sshx.ServerUpdate
	10, // 14: sshx.SshxService.Close:output_type -> sshx.CloseResponse
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_sshx_proto_init() }
func file_proto_sshx_proto_init() {
	if File_proto_sshx_proto != nil {
		return
	}
	file_proto_sshx_proto_msgTypes[3].OneofWrappers = []any{}
	file_proto_sshx_proto_msgTypes[7].OneofWrappers = []any{
		(*ClientUpdate_Hello)(nil),
		(*ClientUpdate_Data)(nil),
		(*ClientUpdate_CreatedShell)(nil),
		(*ClientUpdate_ClosedShell)(nil),
		(*ClientUpdate_Pong)(nil),
		(*ClientUpdate_Error)(nil),
	}
	file_proto_sshx_proto_msgTypes[8].OneofWrappers = []any{
		(*ServerUpdate_Input)(nil),
		(*ServerUpdate_CreateShell)(nil),
		(*ServerUpdate_CloseShell)(nil),
		(*ServerUpdate_Sync)(nil),
		(*ServerUpdate_Resize)(nil),
		(*ServerUpdate_Ping)(nil),
		(*ServerUpdate_Error)(nil),
	}
	file_proto_sshx_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_sshx_proto_rawDesc), len(file_proto_sshx_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_sshx_proto_goTypes,
		DependencyIndexes: file_proto_sshx_proto_depIdxs,
		MessageInfos:      file_proto_sshx_proto_msgTypes,
	}.Build()
	File_proto_sshx_proto = out.File
	file_proto_sshx_proto_goTypes = nil
	file_proto_sshx_proto_depIdxs = nil
}
