// This file contains the service definition for sshx, used by the client to
// communicate their terminal state over gRPC.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/sshx.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SshxService_Open_FullMethodName    = "/sshx.SshxService/Open"
	SshxService_Channel_FullMethodName = "/sshx.SshxService/Channel"
	SshxService_Close_FullMethodName   = "/sshx.SshxService/Close"
)

// SshxServiceClient is the client API for SshxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SshxServiceClient interface {
	// Create a new SSH session for a given computer.
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error)
	// Stream real-time commands and terminal outputs to the session.
	Channel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientUpdate, ServerUpdate], error)
	// Gracefully shut down an existing SSH session.
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
}

type sshxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSshxServiceClient(cc grpc.ClientConnInterface) SshxServiceClient {
	return &sshxServiceClient{cc}
}

func (c *sshxServiceClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenResponse)
	err := c.cc.Invoke(ctx, SshxService_Open_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sshxServiceClient) Channel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientUpdate, ServerUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SshxService_ServiceDesc.Streams[0], SshxService_Channel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientUpdate, ServerUpdate]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SshxService_ChannelClient = grpc.BidiStreamingClient[ClientUpdate, ServerUpdate]

func (c *sshxServiceClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, SshxService_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SshxServiceServer is the server API for SshxService service.
// All implementations must embed UnimplementedSshxServiceServer
// for forward compatibility.
type SshxServiceServer interface {
	// Create a new SSH session for a given computer.
	Open(context.Context, *OpenRequest) (*OpenResponse, error)
	// Stream real-time commands and terminal outputs to the session.
	Channel(grpc.BidiStreamingServer[ClientUpdate, ServerUpdate]) error
	// Gracefully shut down an existing SSH session.
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	mustEmbedUnimplementedSshxServiceServer()
}

// UnimplementedSshxServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSshxServiceServer struct{}

func (UnimplementedSshxServiceServer) Open(context.Context, *OpenRequest) (*OpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedSshxServiceServer) Channel(grpc.BidiStreamingServer[ClientUpdate, ServerUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}
func (UnimplementedSshxServiceServer) Close(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedSshxServiceServer) mustEmbedUnimplementedSshxServiceServer() {}
func (UnimplementedSshxServiceServer) testEmbeddedByValue()                     {}

// UnsafeSshxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SshxServiceServer will
// result in compilation errors.
type UnsafeSshxServiceServer interface {
	mustEmbedUnimplementedSshxServiceServer()
}

func RegisterSshxServiceServer(s grpc.ServiceRegistrar, srv SshxServiceServer) {
	// If the following call pancis, it indicates UnimplementedSshxServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SshxService_ServiceDesc, srv)
}

func _SshxService_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshxServiceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SshxService_Open_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshxServiceServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SshxService_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SshxServiceServer).Channel(&grpc.GenericServerStream[ClientUpdate, ServerUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SshxService_ChannelServer = grpc.BidiStreamingServer[ClientUpdate, ServerUpdate]

func _SshxService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshxServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SshxService_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshxServiceServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SshxService_ServiceDesc is the grpc.ServiceDesc for SshxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SshxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sshx.SshxService",
	HandlerType: (*SshxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _SshxService_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _SshxService_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _SshxService_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/sshx.proto",
}
